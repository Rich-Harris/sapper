/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

// CONCATENATED MODULE: ./app/manifest/service-worker.js
// This file is generated by Sapper â€” do not edit it!
const timestamp = 1520096836803;

const assets = [
	"favicon.png",
	"global.css",
	"great-success.png",
	"manifest.json",
	"svelte-logo-192.png",
	"svelte-logo-512.png"
];

const shell = [
	"/client/48bd936692082e9009f3/slow_preload.6.js",
	"/client/48bd936692082e9009f3/_.0.js",
	"/client/48bd936692082e9009f3/blog_$slug$.2.js",
	"/client/48bd936692082e9009f3/about.3.js",
	"/client/48bd936692082e9009f3/_5xx.4.js",
	"/client/48bd936692082e9009f3/_4xx.5.js",
	"/client/48bd936692082e9009f3/blog.1.js",
	"/client/48bd936692082e9009f3/show_url.7.js",
	"/client/48bd936692082e9009f3/redirect_to.8.js",
	"/client/48bd936692082e9009f3/redirect_from.9.js",
	"/client/48bd936692082e9009f3/delete_test.10.js",
	"/client/48bd936692082e9009f3/main.js"
];

const routes = [
	{ pattern: /^\/?$/ },
	{ pattern: /^\/redirect-from\/?$/ },
	{ pattern: /^\/slow-preload\/?$/ },
	{ pattern: /^\/redirect-to\/?$/ },
	{ pattern: /^\/delete-test\/?$/ },
	{ pattern: /^\/show-url\/?$/ },
	{ pattern: /^\/about\/?$/ },
	{ pattern: /^\/blog\/?$/ },
	{ pattern: /^\/blog(?:\/([^\/]+?))?\/?$/ }
];
// CONCATENATED MODULE: ./app/service-worker.js


const ASSETS = `cachetimestamp`;

// `shell` is an array of all the files generated by webpack,
// `assets` is an array of everything in the `assets` directory
const to_cache = shell.concat(assets);
const cached = new Set(to_cache);

self.addEventListener('install', event => {
	event.waitUntil(
		caches
			.open(ASSETS)
			.then(cache => cache.addAll(to_cache))
			.then(() => {
				self.skipWaiting();
			})
	);
});

self.addEventListener('activate', event => {
	event.waitUntil(
		caches.keys().then(async keys => {
			// delete old caches
			for (const key of keys) {
				if (key !== ASSETS) await caches.delete(key);
			}

			await self.clients.claim();
		})
	);
});

self.addEventListener('fetch', event => {
	const url = new URL(event.request.url);

	// don't try to handle e.g. data: URIs
	if (!url.protocol.startsWith('http')) return;

	// always serve assets and webpack-generated files from cache
	if (cached.has(url.pathname)) {
		event.respondWith(caches.match(event.request));
		return;
	}

	// for pages, you might want to serve a shell `index.html` file,
	// which Sapper has generated for you. It's not right for every
	// app, but if it's right for yours then uncomment this section
	/*
	if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
		event.respondWith(caches.match('/index.html'));
		return;
	}
	*/

	// for everything else, try the network first, falling back to
	// cache if the user is offline. (If the pages never change, you
	// might prefer a cache-first approach to a network-first one.)
	event.respondWith(
		caches
			.open('offline')
			.then(async cache => {
				try {
					const response = await fetch(event.request);
					cache.put(event.request, response.clone());
					return response;
				} catch(err) {
					const response = await cache.match(event.request);
					if (response) return response;

					throw err;
				}
			})
	);
});


/***/ })
/******/ ]);